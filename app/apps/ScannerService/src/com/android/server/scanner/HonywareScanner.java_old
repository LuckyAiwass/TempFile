package com.android.server.scanner;

import com.android.server.ScanService;

import android.content.ContentResolver;
import android.provider.Settings;
import android.device.ScanNative;
import android.util.Log;
import android.util.SparseArray;

import java.util.HashMap;

public class HonywareScanner extends SerialScanner {
    private static final String TAG = "HonywareScanner";

    public HonywareScanner(ScanService scanService) {
        super(scanService);
        // TODO Auto-generated constructor stub
        mScanService = scanService;
        mScannerType = ScannerFactory.TYPE_N3680;
        mBaudrate = 115200;
        for (int i = 0; i < INTERNAL_PROPERTY_INDEX.length; i++) {
            mPropIndexHashMap.put(INTERNAL_PROPERTY_INDEX[i], VALUE_PARAM_INDEX[i]);
        }
	}
    @Override
    protected boolean onDataReceived() {

    	if (mBufOffset < 4)
    		return false;
  
        // for honyware 5180
            int start = BytesIndexOf(mBuffer, 0, mBufOffset, (byte) 0x02);
            Log.i(TAG, "----------------------------start=[" + start + "]");
           if (start != -1) {
                int end = BytesIndexOf(mBuffer, start, mBufOffset - start, (byte) 0x03);
                Log.i(TAG, "----------------------------end=[" + end + "]");
               if (end != -1) {
                    int barcodelen = end - start - 2;

                   byte[] tmp = new byte[barcodelen];
                    for (int i = 0; i < barcodelen; ++i) {
                        tmp[i] = mBuffer[start + 2 + i];
                        //Log.i(TAG, "----------------------------tmp[i]=" + tmp[i] + "");
                    }
                    sendBroadcast(tmp, mBuffer[start + 1], barcodelen);
                    // 把剩余内容移动到缓冲头部
                    int len = mBufOffset - (end + 1); // 剩余长度
                    Log.i(TAG, "-----------next len-------len=[" + len + "]");
                   for (int i = 0; i < len; ++i) {
                        mBuffer[i] = mBuffer[end + 1 + i];
                    }
                   mBufOffset = len;
                    return true;
                }// end of end != -1
            } // end of start !- 01
        return false;
   }
    
    private boolean CheckCheckSum(byte[] arr, int offset, int length) {
		int checksum = 0;
	    int data = 0;
		int i = 0;
		for (i = 0; i < length - 2; ++i) {
			data = arr[offset + i] & 0xFF;
			checksum = (checksum + data) & 0xFFFF;
		}
		checksum = (~checksum + 0x0001) & 0xFFFF;
		if (((checksum & 0xFFFF) >> 8) == (arr[offset + i++] & 0xFF)
				&& (checksum & 0xFF) == (arr[offset + i] & 0xFF)) {
			return true;
		} else {
			return false;
	    }
	}
    
    private int BytesIndexOf(byte[] arr, int offset, int count, byte b) {
        for (int i = offset; i < offset + count; ++i) {
            if (arr[i] == b) {
                return i;
            }
        }
        return -1;
    }
    @Override
    protected void onGetParamTimeout() {
        // TODO Auto-generated method stub

    }

   @Override
    protected void onSetParamTimeout() {
        // TODO Auto-generated method stub
    }

    @Override
    public void setDefaults() {
        // TODO Auto-generated method stub
    }

    @Override
    public int setProperties(SparseArray<Integer> property) {
        // TODO Auto-generated method stub
        synchronized (mHandler) {
            
        }
      return 0;
    }
    
    static class N3680ParamIndex {
        public static final int IMAGE_PICKLIST_MODE = RESERVED_VALUE;
        public static final int IMAGE_ONE_D_INVERSE = RESERVED_VALUE;
        public final static int LASER_ON_TIME = 0x88;//0x01-0x63 df 0x1e * 100 ms
        public final static int TIMEOUT_BETWEEN_SAME_SYMBOL = 0x89;//0x01-0x63 df 0x30
        public final static int LINEAR_CODE_TYPE_SECURITY_LEVEL = 0x4e;//1 2 3 4
        public static final int FUZZY_1D_PROCESSING = RESERVED_VALUE;
        public static final int MULTI_DECODE_MODE = RESERVED_VALUE;
        public static final int BAR_CODES_TO_READ = RESERVED_VALUE;
        public static final int FULL_READ_MODE = RESERVED_VALUE;
        public static final int CODE39_ENABLE = 0x00;
        public static final int CODE39_ENABLE_CHECK = 0x30;
        public static final int CODE39_SEND_CHECK = 0x2b;//TODO 2d 1d
        public static final int CODE39_FULL_ASCII = 0x11;
        public static final int CODE39_LENGTH1 = 0x12;
        public static final int CODE39_LENGTH2 = 0x13;
        public static final int TRIOPTIC_ENABLE = 0x0d;
        public static final int CODE32_ENABLE = 0x56;//code32 //TODO 2d 1d need enable code39
        public static final int CODE32_SEND_CHECK = SPECIAL_VALUE;  // 2d 1d
        public static final int CODE32_SEND_START = SPECIAL_VALUE;//0xe7;//2d 1d adding the prefix character "A" to all Code 32 bar codes
        public static final int C25_ENABLE = 0xf0 << 8 | 0x98;
        public static final int D25_ENABLE = 0x05;//TODO 2d 1d discrete 2 of 5
        public static final int D25_ENABLE_CHECK = SPECIAL_VALUE;  //TODO 2d 1d
        public static final int D25_SEND_CHECK = SPECIAL_VALUE;  //TODO 2d 1d
        public static final int D25_2_BAR_START = SPECIAL_VALUE;  
        public static final int D25_LENGTH1 = 0x14;//TODO 2d 1d
        public static final int D25_LENGTH2 = 0x15;//TODO 2d 1d
        public static final int M25_ENABLE = 0xf2<<8|0x60;//TODO 2d matrix2of5
        public static final int M25_ENABLE_CHECK = 0xf2<<8|0x61;//TODO 2d
        public static final int M25_SEND_CHECK = 0xf2<<8|0x62;//TODO 2d
        public static final int M25_LENGTH1 = 0xf2<<8|0x63;//TODO 2d
        public static final int M25_LENGTH2 = 0xf2<<8|0x64;//TODO 2d
        public final static int CODE11_ENABLE = 0x0a;
        public final static int CODE11_ENABLE_CHECK = 0x34;
        public final static int CODE11_SEND_CHECK = 0x2f;
        public final static int CODE11_LENGTH1 = 0x1c;//min 2
        public final static int CODE11_LENGTH2 = 0x01d;//max 14
        public static final int I25_ENABLE = 0x06;
        public static final int I25_ENABLE_CHECK = 0x31;
        public static final int I25_SEND_CHECK = 0x2c;//TODO 2d 1d
        public static final int I25_CASE_CODE = SPECIAL_VALUE; //RESERVED_VALUE;//TODO 2d 1d
        public final static int I25_TO_EAN13 = 0x52;
        public static final int I25_LENGTH1 = 0x16;
        public static final int I25_LENGTH2 = 0x17;
        public static final int CODABAR_ENABLE = 0x07;
        public static final int CODABAR_ENABLE_CHECK = 0xf2<<8 | 0x68;  //TODO 2d 1d
        public static final int CODABAR_SEND_CHECK = 0xf2<<8 | 0x69;//SPECIAL_VALUE;  //TODO 2d 1d
        public static final int CODABAR_SEND_START = 0x37;
        public static final int CODABAR_NOTIS = 0x37;
        public static final int CODABAR_CLSI = 0x36;
        public static final int CODABAR_WIDE_GAPS = SPECIAL_VALUE; //RESERVED_VALUE;
        public static final int CODABAR_LENGTH1 = 0x18;
        public static final int CODABAR_LENGTH2 = 0x19;
        public static final int CODE93_ENABLE = 0x09;
        public static final int CODE93_LENGTH1 = 0x1a;
        public static final int CODE93_LENGTH2 = 0x1b;
        public static final int CODE128_ENABLE = 0x08;
        public static final int CODE128_EXT_ASCII = SPECIAL_VALUE; 
        public static final int CODE128_LENGTH1 = 0xf2<<8 | 0x72;  //TODO 2d (1d No length setting is required for Code 128.)
        public static final int CODE128_LENGTH2 = 0xf2<<8 | 0x73;  //TODO 2d 1d
        public static final int CODE_ISBT_128 = 0x54;
        public static final int CODE128_GS1_ENABLE = 0x0e;      //gs1-128
        public static final int CODE128_GS1_LENGTH1 = 0xf2<<8 | 0x9a;
        public static final int CODE128_GS1_LENGTH2 = 0xf2<<8 | 0x9b;
        public static final int UPCA_ENABLE = 0x01;
        public static final int UPCA_SEND_CHECK = 0x28;
        public static final int UPCA_SEND_SYS = 0x22;//TODO 2d 1d//0/1/2 df 0  (<SYSTEM CHARACTER> <DATA>)(0x01)  (< COUNTRY CODE> <SYSTEM CHARACTER> <DATA>)(0x02)
        public static final int UPCA_TO_EAN13 = 0x22;//SPECIAL_VALUE; //TODO 2d 1d  (< COUNTRY CODE> <SYSTEM CHARACTER> <DATA>)(0x02)
        public static final int UPCE_ENABLE = 0x02;
        public static final int UPCE_SEND_CHECK = 0x29;
        public static final int UPCE_SEND_SYS = 0x23;//TODO 2d 1d//0/1/2 df 0
        public static final int UPCE_TO_UPCA = 0x25;
        public final static int UPCE1_ENABLE = 0x0C;
        public final static int UPCE1_SEND_CHECK = 0x2A;
        public final static int UPCE1_SEND_SYS = 0x24;
        public final static int UPCE1_TO_UPCA = 0x26;
        public static final int EAN13_ENABLE = 0x03;
        public static final int EAN13_SEND_CHECK = 0xf2<<8 | 0x3a;//TODO 2d 1d
        public static final int EAN13_SEND_SYS = SPECIAL_VALUE; //RESERVED_VALUE;;//TODO 2d 1d
        public final static int EAN13_BOOKLANDEAN = 0x53;//BOOKLANDEAN
        public final static int EAN13_BOOKLAND_FORMAT = 0xf1 << 8 | 0x40;//df 0x00 ISBN-10;0x01 ISBN-13
        public static final int EAN8_ENABLE = 0x04;
        public static final int EAN8_SEND_CHECK = 0xf2<<8 | 0x41;//SPECIAL_VALUE; enable chk  0xf2<<8 | 0x40
        public static final int EAN8_TO_EAN13 = 0x27;//0x27  EAN Zero Extend //Convert EAN-8 to EAN-13 Type parm 0xe0 val 0* as ean13 val1 as ean8 When EAN Zero Extend is disabled, this parameter has no effect on bar code data.
        public static final int EAN_EXT_ENABLE_2_5_DIGIT = 0x10;//TODO to see upc-a upc-e ena-13 ena-8  ??????????????
        public final static int UPC_EAN_SECURITY_LEVEL = 0x4d;//0 1 2 3
        public final static int UCC_COUPON_EXT_CODE= 0x55;
        public static final int MSI_ENABLE = 0x0b;
        public static final int MSI_REQUIRE_2_CHECK = 0x32;
        public static final int MSI_SEND_CHECK = 0x2e;
        public static final int MSI_CHECK_2_MOD_11 = 0x33;//0 is mod10/mod11 1 is mod10/mod10 df 1
        public static final int MSI_LENGTH1 = 0x1e;
        public static final int MSI_LENGTH2 = 0x1f;
        public static final int GS1_14_ENABLE = 0xf0<<8|0x52;//rss code
        public static final int GS1_14_TO_UPC_EAN = 0xf0<<8 | 0x8d; //RESERVED_VALUE;//0xf0<<8|0x8d;//TODO-
        public static final int GS1_LIMIT_ENABLE = 0xf0<<8|0x53;
        public static final int GS1_EXP_ENABLE = 0xf0<<8|0x54;
        public static final int GS1_EXP_LENGTH1 = 0xf2<<8|0xb0; 
        public static final int GS1_EXP_LENGTH2 = 0xf2<<8|0xb1; 
        public static final int US_POSTNET_ENABLE = RESERVED_VALUE;
        public static final int US_PLANET_ENABLE = RESERVED_VALUE;
        public static final int US_POSTAL_SEND_CHECK = RESERVED_VALUE;
        public static final int USPS_4STATE_ENABLE = RESERVED_VALUE;
        public static final int UPU_FICS_ENABLE = RESERVED_VALUE;
        public static final int ROYAL_MAIL_ENABLE = RESERVED_VALUE;
        public static final int ROYAL_MAIL_SEND_CHECK = RESERVED_VALUE;
        public static final int AUSTRALIAN_POST_ENABLE = RESERVED_VALUE;
        public static final int KIX_CODE_ENABLE = RESERVED_VALUE;
        public static final int JAPANESE_POST_ENABLE = RESERVED_VALUE;
        public static final int PDF417_ENABLE = RESERVED_VALUE;
        public static final int PDF417_LENGTH1 = RESERVED_VALUE;
        public static final int PDF417_LENGTH2 = RESERVED_VALUE;
        public static final int MICROPDF417_ENABLE = RESERVED_VALUE;
        public static final int MICROPDF417_LENGTH1 = RESERVED_VALUE;
        public static final int MICROPDF417_LENGTH2 = RESERVED_VALUE;
        public static final int COMPOSITE_CC_AB_ENABLE = RESERVED_VALUE;     //composite-cc_ab
        public static final int COMPOSITE_CC_AB_LENGTH1 = RESERVED_VALUE; 
        public static final int COMPOSITE_CC_AB_LENGTH2 = RESERVED_VALUE; 
        public static final int COMPOSITE_CC_C_ENABLE = RESERVED_VALUE;     //composite-cc_c
        public static final int COMPOSITE_CC_C_LENGTH1 = RESERVED_VALUE; 
        public static final int COMPOSITE_CC_C_LENGTH2 = RESERVED_VALUE;
        public final static int COMPOSITE_TLC39_ENABLE = RESERVED_VALUE;
        public static final int HANXIN_ENABLE =  RESERVED_VALUE;
        public static final int HANXIN_INVERSE =  RESERVED_VALUE;
        public static final int DATAMATRIX_ENABLE = RESERVED_VALUE;
        public static final int DATAMATRIX_LENGTH1 = RESERVED_VALUE;
        public static final int DATAMATRIX_LENGTH2 = RESERVED_VALUE;
        public static final int DATAMATRIX_INVERSE = RESERVED_VALUE;
        public static final int MAXICODE_ENABLE = RESERVED_VALUE;
        public static final int MAXICODE_LENGTH1 = RESERVED_VALUE;
        public static final int MAXICODE_LENGTH2 = RESERVED_VALUE;
        public static final int QRCODE_ENABLE = RESERVED_VALUE;           //2d
        public static final int MICROQRCODE_ENABLE = RESERVED_VALUE;      //2d
        public static final int QRCODE_LENGTH1 = RESERVED_VALUE;
        public static final int QRCODE_LENGTH2 = RESERVED_VALUE;
        public static final int QRCODE_INVERSE = RESERVED_VALUE;
        public static final int AZTEC_ENABLE = RESERVED_VALUE;            //2d
        public static final int AZTEC_LENGTH1 = RESERVED_VALUE;
        public static final int AZTEC_LENGTH2 = RESERVED_VALUE;
        public static final int AZTEC_INVERSE = RESERVED_VALUE;
    }
   
    private final int[] VALUE_PARAM_INDEX = {
            N3680ParamIndex.IMAGE_PICKLIST_MODE,
            N3680ParamIndex.IMAGE_ONE_D_INVERSE,
            N3680ParamIndex.LASER_ON_TIME,
            N3680ParamIndex.TIMEOUT_BETWEEN_SAME_SYMBOL,
            N3680ParamIndex.LINEAR_CODE_TYPE_SECURITY_LEVEL,
            N3680ParamIndex.FUZZY_1D_PROCESSING,
            N3680ParamIndex.MULTI_DECODE_MODE,
            N3680ParamIndex.BAR_CODES_TO_READ,
            N3680ParamIndex.FULL_READ_MODE,
            N3680ParamIndex.CODE39_ENABLE,
            N3680ParamIndex.CODE39_ENABLE_CHECK,
            N3680ParamIndex.CODE39_SEND_CHECK,
            N3680ParamIndex.CODE39_FULL_ASCII,
            N3680ParamIndex.CODE39_LENGTH1,
            N3680ParamIndex.CODE39_LENGTH2,
            N3680ParamIndex.TRIOPTIC_ENABLE,
            N3680ParamIndex.CODE32_ENABLE,
            N3680ParamIndex.CODE32_SEND_START,
            N3680ParamIndex.C25_ENABLE,
            N3680ParamIndex.D25_ENABLE, 
            N3680ParamIndex.D25_LENGTH1,
            N3680ParamIndex.D25_LENGTH2,
            N3680ParamIndex.M25_ENABLE,
            N3680ParamIndex.CODE11_ENABLE,
            N3680ParamIndex.CODE11_ENABLE_CHECK,
            N3680ParamIndex.CODE11_SEND_CHECK,
            N3680ParamIndex.CODE11_LENGTH1,
            N3680ParamIndex.CODE11_LENGTH2,
            N3680ParamIndex.I25_ENABLE,
            N3680ParamIndex.I25_ENABLE_CHECK,
            N3680ParamIndex.I25_SEND_CHECK,
            N3680ParamIndex.I25_LENGTH1,
            N3680ParamIndex.I25_LENGTH2,
            N3680ParamIndex.I25_TO_EAN13,
            N3680ParamIndex.CODABAR_ENABLE,
            N3680ParamIndex.CODABAR_NOTIS,
            N3680ParamIndex.CODABAR_CLSI,
            N3680ParamIndex.CODABAR_LENGTH1,
            N3680ParamIndex.CODABAR_LENGTH2,
            N3680ParamIndex.CODE93_ENABLE,
            N3680ParamIndex.CODE93_LENGTH1,
            N3680ParamIndex.CODE93_LENGTH2,
            N3680ParamIndex.CODE128_ENABLE,
            N3680ParamIndex.CODE128_LENGTH1,
            N3680ParamIndex.CODE128_LENGTH2,
            N3680ParamIndex.CODE_ISBT_128,
            N3680ParamIndex.CODE128_GS1_ENABLE,
            N3680ParamIndex.UPCA_ENABLE, 
            N3680ParamIndex.UPCA_SEND_CHECK,
            N3680ParamIndex.UPCA_SEND_SYS,
            N3680ParamIndex.UPCE_ENABLE,
            N3680ParamIndex.UPCE_SEND_CHECK,
            N3680ParamIndex.UPCE_SEND_SYS,
            N3680ParamIndex.UPCE_TO_UPCA,
            N3680ParamIndex.UPCE1_ENABLE,
            N3680ParamIndex.UPCE1_SEND_CHECK,
            N3680ParamIndex.UPCE1_SEND_SYS,
            N3680ParamIndex.UPCE1_TO_UPCA,
            N3680ParamIndex.EAN13_ENABLE,
            N3680ParamIndex.EAN13_BOOKLANDEAN,
            N3680ParamIndex.EAN13_BOOKLAND_FORMAT,
            N3680ParamIndex.EAN8_ENABLE,
            N3680ParamIndex.EAN8_TO_EAN13,
            N3680ParamIndex.EAN_EXT_ENABLE_2_5_DIGIT,
            N3680ParamIndex.UPC_EAN_SECURITY_LEVEL,
            N3680ParamIndex.UCC_COUPON_EXT_CODE,
            N3680ParamIndex.MSI_ENABLE,
            N3680ParamIndex.MSI_REQUIRE_2_CHECK,
            N3680ParamIndex.MSI_SEND_CHECK,
            N3680ParamIndex.MSI_CHECK_2_MOD_11,
            N3680ParamIndex.MSI_LENGTH1,
            N3680ParamIndex.MSI_LENGTH2,
            N3680ParamIndex.GS1_14_ENABLE,
            N3680ParamIndex.GS1_14_TO_UPC_EAN,
            N3680ParamIndex.GS1_LIMIT_ENABLE,
            N3680ParamIndex.GS1_EXP_ENABLE,
            N3680ParamIndex.GS1_EXP_LENGTH1,
            N3680ParamIndex.GS1_EXP_LENGTH2,
            N3680ParamIndex.US_POSTNET_ENABLE,
            N3680ParamIndex.US_PLANET_ENABLE,
            N3680ParamIndex.US_POSTAL_SEND_CHECK,
            N3680ParamIndex.USPS_4STATE_ENABLE,
            N3680ParamIndex.UPU_FICS_ENABLE,
            N3680ParamIndex.ROYAL_MAIL_ENABLE,
            N3680ParamIndex.ROYAL_MAIL_SEND_CHECK,
            N3680ParamIndex.AUSTRALIAN_POST_ENABLE,
            N3680ParamIndex.KIX_CODE_ENABLE,
            N3680ParamIndex.JAPANESE_POST_ENABLE,
            N3680ParamIndex.PDF417_ENABLE,
            N3680ParamIndex.MICROPDF417_ENABLE,
            N3680ParamIndex.COMPOSITE_CC_AB_ENABLE,
            N3680ParamIndex.COMPOSITE_CC_C_ENABLE,
            N3680ParamIndex.COMPOSITE_TLC39_ENABLE,
            N3680ParamIndex.HANXIN_ENABLE,
            N3680ParamIndex.HANXIN_INVERSE,
            N3680ParamIndex.DATAMATRIX_ENABLE,
            N3680ParamIndex.DATAMATRIX_LENGTH1,
            N3680ParamIndex.DATAMATRIX_LENGTH2,
            N3680ParamIndex.DATAMATRIX_INVERSE,
            N3680ParamIndex.MAXICODE_ENABLE,
            N3680ParamIndex.QRCODE_ENABLE,
            N3680ParamIndex.QRCODE_INVERSE,
            N3680ParamIndex.MICROQRCODE_ENABLE,
            N3680ParamIndex.AZTEC_ENABLE,
            N3680ParamIndex.AZTEC_INVERSE,
    };
}
